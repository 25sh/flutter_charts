#+TODO: TODO IN-PROGRESS WAITING DONE CANCELED

* Refactorings (Flutter Charts)

1. [X] Ask a question on how to achieve the paint in CustomPainter does not go over boundaries
2. [-]  *Oct Release preparation*
   1) [X] *restructure line_chart_painter and other files to support extension as bar_chart_painter*
   2) [X] Bar preparation: in Layouter layout, add also calcs and members for barGridXCoord (bar grid vertical lines are  moved by half step compared to lineGrid)
      - [X] class *StackedValue* - maintains value, stackFrom, stackTo

      - [X] class stackedDataRows - in ChartData

        - [X] list of StackedValue
        - [X] On VerticalBar, show the bars rather than lines
        - [X] On VerticalBar layouter, move the vertical lines shifter around  bars, not it their middle

        - [X] methods to create stackedDataRows from dataRows. the idea is, on Bar chart painter, we just extend line chart painter, and:

          - [X] keep layouting and grid painting

          - [X] keep X/Y axis painting

   3) [X] Move presenters to presenters.dart

   4) [X] split line_chart_painters.dart to chart_painter.dart and line_chart_painter.dart, column_chart_painter.dart etc

   5) [X] split options for line and vertical bar

   6) [X] Refactor/rename

      1) [X] SimpleChartLayouter -> ChartLayouter 

      2) [X] LabelScalerFormatter -> YScalerAndLabelFormatter

      3) [X] labelScaler -> yScaler (watch for conflicts)

      4) [X] elements_layouters to layouters

      5) [X] PointAndPresenterCreator ->  PresenterCreator

      6) [X] ValuePoint -> Point

      7) [X] ValuePresented -> Presenter

      8) [X] PointAndLine -> LineAndHotspot (string substitution, upper/lower)

      9) [X] PointAndLineLeafCreator -> LineAndHotspotLeafCreator

      10) [X] commit and push

      11) [X] split files into dir-per-chart-type structure

   7) [X] Remove Android and ios from .gitignore. Right now, if someone gets flutter_charts from github, they have to run ~flutter create .~  
   8) [X] Reorganize todos  document first - go over todo 0 
   9) [ ] *Make sure and put checks, that all paint operations remain within =size=* - alternative : Use *ClipLayout*.
      + [ ] *How to do this for TextPainter.paint??*

   10) [X] Move todos: todo 3 => 4 , 2 => 3, 1 => 2 0 => 1, 00 => 0
   11) [ ] Change all reduce to fold to better handle no data

   12) [ ] *Design - Document*

   13) [ ] Draw UML Diagram. Think of a way do decrease dependency of classes on others, or make clear why dependecy needed.

   14) [X] Create project flutter_charts. Empty, add Readme, license etc.


* IN-PROGRESS Changing the structure of the "data source" class in Flutter Charts

I realize we discussed we will make the new internal structure of ~ChartData.dataRows~ to be something like ~List<List<Point>~. During this week I went through some torments and I think I arrived at a change; but I do not want to push it without explanation. So let me describe the current structure, and the newly suggested structure of ~ChartData~ (renaming it to InternalChartData and providing adaptors).

** Current ~ChartData~ structure - see  file:../lib/src/chart/data.dart


** Towards a new, suggested ~InternalChartData~ class - this is the class Flutter Charts will work from at it's core.

First, let me summarize that current (unexpressed) constraints on  the current ~ChartData.dataRows~ - in essence, all corresponding list lengths must be the same:

1) Along the x axis (row wise)   : (each row in dataRows).length is the same 
2) Along the x axis (row wise)   : (each row in dataRows).length == xLabels.length 
3) Along the y axis (series wise): dataRows.length == dataRowsColors.length == dataRowsLegends.length

Basically, the ~dataRows~ member assumed to be an array (list of rows of equal length)

So towards the future, the more I was thinking the way the layouting may work, the more I am sure it is best to keep 1) for sure, and maybe 3), but drop 2) for sure to support uneven steps and skipped labels. And in all case I kept arriving at thinking the layouter would eventually convert any ~List<List<Point>>~ to a list of Y values ~List<List<double>>~ and extract the X values under each point so we have List<double> xValues. I would like to note that this structure can be made in all respects equivalent to  ~List<List<Point>>~ - we can always write adaptors in either direction. 

So I'd like to support the internal structure of ChartData as described below, and all external data in different formats/structure would have to provide convertes; this project would probably provide some basic adaptors (I am thinkig to support some basic (e.g. some Higchart type) JSON data formats out of the box.

Next, goals and non-goals of this change.

*Current goals of the ~InternalChartData~ class:*

- Define a data source class used on the the low end of chart layout. 
- Define the data source class in terms of lowest level primitives: Because in the end, all paint operations operate only with Dart ~double~ (for Y values, and Distanced X points) and Dart ~String~, we only use those primitives.
- Still allow for a simple, no frills way of clients defining their own X and Y labels directly, similar to the current ~ChartData~ 
- Provide a sufficient description for data defined as any "reasonable" object to be convertable to  ~InternalChartData~ through adaptors.
  - Data Adaptor Examples: 
    - X values is a List<String>, Y values is a  List<double>      => ~InternalChartData~
    - X and Y values are an array, e.g. List<List<double>>         => ~InternalChartData~
    - X values is a List<DateTime>, Y values is a  List<double>    => ~InternalChartData~
- Provide a converter from ~ChartData~ to  ~InternalChartData~


*Current non-Goals of the ~InternalChartData~ class. These may become goals later*
- We can rephrase the simplification of ~double~ (both for X and Y ) in terms of interfaces that allow for *order* and *distance* : let us call them ~OrdinalDimension~ and ~DistancedDimension extends OrdinalDimension~. ~OrdinalDimension~ provides order of it's points,  ~DistancedDimension~ provides distance of it's points. Basically substitute ~double~ everywhere above and is the definition of ~InternalChartData~ with ~OrdinalDimension~ . *BUT I HAVE A TODO HOW TO DO THIS RIGHT*. 
  - ~double DistancedDimension.distance(DimensionPoint point, DimensionPoint point)~ // must satisfy distance properties
  - ~int OrdinalDimension.comparePoints(DimensionPoint point, DimensionPoint point)~
  - ~double DimensionPoint.toDouble()~ - basically, distance from origin on the chart. Required(?) to find a minimum, maximum; We require this for OrdinalDimension as well, where it duplicates order - basically the result is the sequence in a the list of ordered dimension points.


For now all members are public but that may change. Also will describe some constructors later.

#+BEGIN_SRC dart

  /// Used internally as a "data source" by Flutter Charts.
  /// 
  /// Data sources in other formats should provide adaptors to convert to this 
  ///   internal format.  
  /// 
  /// Data Adaptor Examples (just as an overview): 
  ///   - X values is a List<String>, Y values is a  List<double>      => ~InternalChartData~
  ///   - X and Y values are an array, e.g. List<List<double>>         => ~InternalChartData~
  ///   - X values is a List<DateTime>, Y values is a  List<double>    => ~InternalChartData~
  ///   - ~ChartData~                                                  => ~InternalChartData~
  class InternalChartData {

    /// Data defined in terms of the low level primitives - a Dart double.

    List<List<double>> dataRows = new List(); 

    /// Map from x values to xLabel. It's keys and values,
    /// decide whether labels displayed are User-Provided or Data-Generated. 
    ///
    /// See the [validate] method which describes how construction of this map
    ///   affects the labels construction as User-Defined vs. Data-Generated.
    ///   Below is a summary from [validate]. This may sound complicated, 
    ///   it exists to *also allow clients
    ///   a simple, no frills way of defining their own X and Y labels directly, 
    ///    similar to the current ~ChartData~ does*.
    ///
    /// 1. Overall Requirement of  [xToXLabelMap]: It is required that [xToXLabelMap]
    ///    contains as many keys as each dataRow length for all [dataRows].
    ///    *Note: If a client does not care about the actual x points, the client must set the keys
    ///        in  [xToXLabelMap] to double 1.0, 2.0 ... etc - as if they were List indexes.*
    ///
    /// 2. Ensure that label is set on all x points, or none.
    ///    So all labels or none must be provided as values of the [xToXLabelMap].
    ///
    /// 3. If labels are not null on all x keys, those labels will be used on the chart -
    ///   so this condition is interpreted as:
    ///   User (Client) provided labels in [xToXLabelMap],
    ///     and is requesting those labels to be shown, as "User-Defined labels".
    ///
    /// 4. If labels are null on all x keys, this condition is interpreted as:
    ///    User (Client) did not provide labels in [xToXLabelMap],
    ///    and is requesting labels to be "Data-Generated". In this case, the
    ///    formatter [xLabelFormatter] must be provided.

    TreeMap<double, String> xToXLabelMap;

    /// Converts a x data value to a label representing the value at x axis point.
    /// Required to create Data-Generated xLabels. 
    ///
    /// See the [validate] method which describes how construction of this map
    ///   affects the labels construction as User-Defined vs. Data-Generated. 

    String Function(double) xLabelFormatter;

    /// Labels on dependent (Y) axis.
    ///
    /// - If you need Data-Generated Y label numbers with units (e.g. %),
    ///   - Do not set [yLabels]
    ///   - Set [ChartOptions.useUserProvidedYLabels] to false
    ///   - define [ChartOptions.yLabelUnits] in options
    /// - If you need to define "Ordinal" (Strings with order) Y labels,
    ///   - Set [yLabels] to ordinal values
    ///   - Set [ChartOptions.useUserProvidedYLabels] to true.
    ///   - [ChartOptions.yLabelUnits] are ignored
    ///
    /// This is used only if [ChartOptions.useUserProvidedYLabels] is true.
    ///
    /// They may be undefined, in which case the
    /// Y axis is likely not shown.

    List<String> yLabels = new List();

    String Function(double) yLabelFormatter;


    /// Legends list. Currently has to be set, but can contain empty Strings
    ///  (in which case todo 1 -take that as a hint user does not want the legend section).

    List<String> dataRowsLegends = new List();

    /// Colors list. Currently has to be set. todo 1 - If not set, default to reasonable colors.

    List<ui.Color> dataRowsColors = new List<ui.Color>();


    ////////////////////////// Added also ////////////////////

    /// - If [true], then the x values keep distances in data: For example, if xs = [1,2,20, 200], 
    ///   then the (relative, scaled) distances between [1,2,20, 200], are preserved,
    ///   so that 1,2,20 will be squished on the left. The only chart type where this is allowed
    ///   is the line chart.
    ///   This setting mathematically means that we view the x axis values using
    ///     a proper real value distance as it's distance (in addition to viewing them ordered).
    /// - If [false], then  then the x values will be "equidistanced": For example, if xs = [1,2,20, 200], 
    ///   then the (relative, scaled) distances between [1,2,20, 200], are the same,
    ///   so that 1, 2, 20, 200 will be evently layed out along the x axis.
    ///   This setting mathematically means that we view the x axis values as ordered (ordinal) labels,
    ///     ignoring the distance between them (when taken as numbers)
    ///
    /// A note: X values [xs] are always ~Ordinal~ (ordered). 

    bool keepXValuesDistances
    
  }

  /// Validate the state of values. This code provides a set of rules this object members must satisfy.
  void _validate() {
    _validateX();
    _validateY();
  }

  void _validateX() {

    if (xToXLabelMap == null) {
      throw Error("xToXLabelMap must be defined!");
    }

    for (dataRow in dataRows) {
      if (dataRow.size != xToXLabelMap.size) {
        throw Error("Each Data row must be same size as xToXLabelMap");
      }
    }  
    
    // The setting of either keys or values or both determines the labels construction 
    //   as User-Defined or Data-Generated.
    // The section below describes the options and combinations.
    if (xToXLabelMap.isEmpty()) {
      // no data, return
      return;
    }

    // Overall Requirement of  [xToXLabelMap]: It is required that [xToXLabelMap]
    //    contains as many keys as each dataRow length for all [dataRows].
    // *Note: If client does not care about the actual x points, client must set the keys
    //        in  [xToXLabelMap] to double 1.0, 2.0 ... etc - as if they were List indexes.*
    
    // Ensure that label is set on all x points, or none.
    // So all labels or none must be provided as values of the [xToXLabelMap].
    if (xToXLabelMap.first.value != null) {
      xToXLabelMap.each( (x, labelValue) {
        if (labelValue == null) throw Error(" all labels or none must be provided as values of the [xToXLabelMap]");
      });
    }
    if (xToXLabelMap.first.value == null) {
      xToXLabelMap.each( (x, labelValue) {
        if (labelValue != null) throw Error(" all labels or none must be provided as values of the [xToXLabelMap]");
      });
    }

    // If labels are not null on all x keys, those labels will be used on the chart -
    //   so this condition is interpreted as:
    // User (Client) provided labels in [xToXLabelMap],
    //   and is requesting those labels to be shown, as "User-Defined labels".
    if (xToXLabelMap.first.value != null) {
      // Labels will be User-Defined.
      if (xLabelFormatter is not null) {
        throw Error("xToXLabelMap defines User-Defined labels, xLabelFormatter should not be set");
      }
    }

    // If labels are null on all x keys, this condition is interpreted as:
    //  User (Client) did not provide labels in [xToXLabelMap],
    //   and is requesting labels to be "Data-Generated". In this case, the
    //   formatter [xLabelFormatter] must be provided.
    if (xToXLabelMap.first.value == null) {
      // Labels will be Data-Generated.
      if (xLabelFormatter is null) {
        throw Error("xToXLabelMap does not define User-Defined labels. xLabelFormatter must be set, to create Data-Generated x labels.");
      }
    }
  }

#+END_SRC

Also, although "from a separation of data and view" principle I originally put some of the settings that define the chart "view" onto ChartOptions, I plan to move them to ChartData, and InternalChartData.

- [ ] ChartOptions.useUserProvidedYLabels -> ChartData
- [ ] ChartOptions.yLabelUnits -> ChartData
- [ ] ChartOptions.toLabel(label) -> ChartData
- 

* TODO After Release

1) [ ] Resolve todo 0

3) [ ] Pull dataRows, options, and PointsColumns into class named ChartData (ChartModel?), getting rid of public dataRows, PointsColumns, options and refactor code to use ChartModel.

4) [ ] Now we manage rowIndex (seriesIndex) in StackableValuePoint as dataRowIndex. So:
   + Add rowIndex on Presenter (Leaf) as dataRowIndex.

   + [ ] remove rowIndex from everywhere - createPointPresenter (createPresentor) , _createPresentersInColumn - and when it is needed for color, just use the Presenter.dataRowIndex.

5) [ ] Split Function of vertGridLines- *vertGridLines[col].from.dx* serves both to draw grid lines, and ValuePoints. Add, right in XLayouterOutput, a variable for valuePointX - *what is the difference from labelX???*.

6) [ ] Redefine Points and Presenters internal structure, as (from the bottom) double-linked list of points (forms Columns), and double-linked list of Columns (forms PointsColumns = Data) and Presenters (PresentersColumns)

7) [ ] Member privacy issues

   1) [ ] ChartPainter.layouter is forced non-private (_) if we want to allow extensibility outside of the chart package (extensibility by clients).

      + Other examples of same issue:

        - 

   2) [ ] Go over usage of private accessing private _chartLayouter._options - suspect. But maybe ok

8) [ ] Think of a way to get rid of the need to upcast in baseclass using " as SomeClass" - 2 occurences in "presenter as presenters.PointAndLinePresenter"

9) [ ] I think yAxisAbsMin/Max passed to layouters is switched. Fix it

10) *REMOVE NOISE OF nextRightPointsColumn nextRightColumnValuePoint*

    1) [ ] *nextRightPointsColumn* IS LIKELY UNUSED, REMOVE but check.

    2) [ ] *nextRightColumnValuePoint*  IS LIKELY UNUSED, REMOVE but check.

11) [ ] Create a document definiting sequence of layouters, and what each does
    - [ ] particular attention to where scaling happents
12) [ ] *Labels and legend improvements*

    1) [ ] labels when printed: 

       1) [ ] if too long, left justify and clip

    2) [ ] legend text clip if too long

13) [ ] Fix and test formalities, add docs, add examples, resolve versionning and library dependencies and branches, other preps before push to pub
    + [ ] *list it here*
    + [ ] 
    + [ ] fix dependencies in pubspec (rm mz)
    + [ ] Test and ensure empty data work.
    + [ ] *ADD TESTS FOR RANGE, END TO END ETC*


* TODO Future: Layout Recreation.
23. [ ] Look over Hotspot calcs and positions, may need to move to GuidingPoints or LayoutValues


* TODO Consider Change naming conventions to WX, HY, CY, CX so all names are consistent 
   - whateverOWX (width along x axis    - when context is offset of some other element)
   - whateverOHY (height along y axis   - when context is offset of some other element)
   - whateverCX  (X coordinate  )       - if it is just a point
   - whateverCY  (Y coordinate  )       - if it is just a point
   - rare use below v
   - whateverRWX (width along x axis  - when context is rectangle)
   - whateverRHY (height along y axis  - when context is rectangle)
   - whateverFromCY (Y coordinate from ) - if it is a point which is part of a line
   - whateverToCY (Y coordinate to )     - if it is a point which is part of a line
   - whateverFromCX (Y coordinate from ) - if it is a point which is part of a line
   - whateverToCX (Y coordinate to )     - if it is a point which is part of a line



