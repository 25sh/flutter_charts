#+TODO: TODO IN-PROGRESS WAITING DONE CANCELED

* Refactorings (Flutter Charts)

1. [X] Ask a question on how to achieve the paint in CustomPainter does not go over boundaries
2. [-]  *Oct Release preparation*
   1) [X] *restructure line_chart_painter and other files to support extension as bar_chart_painter*
   2) [X] Bar preparation: in Layouter layout, add also calcs and members for barGridXCoord (bar grid vertical lines are  moved by half step compared to lineGrid)
      - [X] class *StackedValue* - maintains value, stackFrom, stackTo

      - [X] class stackedDataRows - in ChartData

        - [X] list of StackedValue
        - [X] On VerticalBar, show the bars rather than lines
        - [X] On VerticalBar layouter, move the vertical lines shifter around  bars, not it their middle

        - [X] methods to create stackedDataRows from dataRows. the idea is, on Bar chart painter, we just extend line chart painter, and:

          - [X] keep layouting and grid painting

          - [X] keep X/Y axis painting

   3) [X] Move presenters to presenters.dart

   4) [X] split line_chart_painters.dart to chart_painter.dart and line_chart_painter.dart, column_chart_painter.dart etc

   5) [X] split options for line and vertical bar

   6) [X] Refactor/rename

      1) [X] SimpleChartLayouter -> ChartLayouter 

      2) [X] LabelScalerFormatter -> YScalerAndLabelFormatter

      3) [X] labelScaler -> yScaler (watch for conflicts)

      4) [X] elements_layouters to layouters

      5) [X] PointAndPresenterCreator ->  PresenterCreator

      6) [X] ValuePoint -> Point

      7) [X] ValuePresented -> Presenter

      8) [X] PointAndLine -> LineAndHotspot (string substitution, upper/lower)

      9) [X] PointAndLineLeafCreator -> LineAndHotspotLeafCreator

      10) [X] commit and push

      11) [X] split files into dir-per-chart-type structure

   7) [X] Remove Android and ios from .gitignore. Right now, if someone gets flutter_charts from github, they have to run ~flutter create .~  
   8) [X] Reorganize todos  document first - go over todo 0 
   9) [ ] *Make sure and put checks, that all paint operations remain within =size=* - alternative : Use *ClipLayout*.
      + [ ] *How to do this for TextPainter.paint??*

   10) [X] Move todos: todo 3 => 4 , 2 => 3, 1 => 2 0 => 1, 00 => 0
   11) [ ] Change all reduce to fold to better handle no data

   12) [ ] *Design - Document*

   13) [ ] Draw UML Diagram. Think of a way do decrease dependency of classes on others, or make clear why dependecy needed.

   14) [X] Create project flutter_charts. Empty, add Readme, license etc.


* IN-PROGRESS Changing structure of the ChartData class

I realize we discussed we will make the new internal structure of ~ChartData.dataRows~ to be something like ~List<List<Point>~. During this week I went through some torments and I think I arrived at a change; but I do not want to push it without explanation. So let me describe the current structure, and the newly suggested structure of ~ChartData~.

** Current ~ChartData~ structure

Currently we have

#+BEGIN_SRC dart

  class ChartData {

    List<List<double>> dataRows = new List();

    List<String> dataRowsLegends = new List();

    List<ui.Color> dataRowsColors = new List<ui.Color>();

    List<String> xLabels = new List();

    /// Labels on dependent (Y) axis. They must be numbers.
    ///
    /// - If you need Data-Generated Y label numbers with units (e.g. %),
    ///   - Do not set [yLabels]
    ///   - Set [ChartOptions.useUserProvidedYLabels] to false
    ///   - define [ChartOptions.yLabelUnits] in options
    /// - If you need to define "Ordinal" (Strings with order) Y labels,
    ///   - Set [yLabels] to ordinal values
    ///   - Set [ChartOptions.useUserProvidedYLabels] to true.
    ///   - [ChartOptions.yLabelUnits] are ignored
    ///
    /// This is used only if [ChartOptions.useUserProvidedYLabels] is true.
    ///
    /// They may be undefined, in which case the
    /// Y axis is likely not shown.
    List<String> yLabels = new List();

  }

#+END_SRC

#+RESULTS:

(leaving the comment on yLabels as their use is more complex, and xLabels are just about to become also more complex ;) )

First, let me summarize that current (unexpressed) constraints on  ~ChartData.dataRows~ - in essence, all corresponding list lengths must be the same:

1) Along the x axis (row wise)   : (each row in dataRows).length is the same 
2) Along the x axis (row wise)   : (each row in dataRows).length == xLabels.length 
3) Along the y axis (series wise): dataRows.length == dataRowsColors.length == dataRowsLegends.length

Basically, ~dataRows~ is assumed to be an array (list of rows of equal length)

So towards the future, the more I was thinking the way the layouting may work, the more I am sure it is best to keep 1) for sure, and maybe 3), but drop 2) for sure to support uneven steps and skipped labels. And in all case I kept arriving at thinking the layouter would eventually convert any ~List<List<Points>>~ to a list of Y values ~List<List<double>>~ and extract the X values under each point so we have List<double> xValues. I would like to note that this structure can be made in all respects equivalent to  ~List<List<Points>>~ - we can always write converters in either direction. 

So I'd like to support the internal structure of ChartData as described below, and all external data in different formats/structure would have to provide convertes; this project would probably provide some basic converters (I am thinkig to support some basic (e.g. some Higchart type) JSON data formats out of the box.

I'd like to rename the existing ~ChartData~ to ~SimpleChartData~. Clearly a breaking change, but hopefully a simple change for clients.

** New, suggested ~ChartData~ structure 

(For now all members public but that may change. Also will provide some constructors later.

#+BEGIN_SRC dart

  class ChartData {

    List<List<double>> dataRows = new List(); 

    List<double> xs = new List(); // x data points for each dataRow values, must be same size and order3.

    Map xToXLabelMap = new Map();      // User-Provided or Data-Generated map from x values to xLabel

    Function xLabelFormatter; // Required to create Data-Generated xLabels.

    List<String> dataRowsLegends = new List();

    List<ui.Color> dataRowsColors = new List<ui.Color>();

    List<String> _xLabels = new List(); // private 

    /// Labels on dependent (Y) axis. They must be numbers.
    ///
    /// - If you need Data-Generated Y label numbers with units (e.g. %),
    ///   - Do not set [yLabels]
    ///   - Set [ChartOptions.useUserProvidedYLabels] to false
    ///   - define [ChartOptions.yLabelUnits] in options
    /// - If you need to define "Ordinal" (Strings with order) Y labels,
    ///   - Set [yLabels] to ordinal values
    ///   - Set [ChartOptions.useUserProvidedYLabels] to true.
    ///   - [ChartOptions.yLabelUnits] are ignored
    ///
    /// This is used only if [ChartOptions.useUserProvidedYLabels] is true.
    ///
    /// They may be undefined, in which case the
    /// Y axis is likely not shown.
    List<String> yLabels = new List();

    ////////////////////////// Added also ////////////////////

    /// If [true], then [xValues] will be presented using scaled distances: e.g. if xs = [1,2,320, 200], 
    /// then the (relative, scaled) distances between [1,2,20, 200], are preserver
    /// (1,2,3 will be squished on the left). 
    ///
    /// A motivation note: X values [xs] are always ~Ordinal~ (ordered). 

    bool doXsHonourDistanceMeasure
    
  }

  // Supporting classes

  abstract class LabelFormatter {
    /// Formats x values to Data-Generated labels
    String format(double x);
  }
#+END_SRC

Notes:

- Would you agree that to display dates on X axis, we store them in data x


* TODO After Release

1) [ ] Resolve todo 0

3) [ ] Pull dataRows, options, and PointsColumns into class named ChartData (ChartModel?), getting rid of public dataRows, PointsColumns, options and refactor code to use ChartModel.

4) [ ] Now we manage rowIndex (seriesIndex) in StackableValuePoint as dataRowIndex. So:
   + Add rowIndex on Presenter (Leaf) as dataRowIndex.

   + [ ] remove rowIndex from everywhere - createPointPresenter (createPresentor) , _createPresentersInColumn - and when it is needed for color, just use the Presenter.dataRowIndex.

5) [ ] Split Function of vertGridLines- *vertGridLines[col].from.dx* serves both to draw grid lines, and ValuePoints. Add, right in XLayouterOutput, a variable for valuePointX - *what is the difference from labelX???*.

6) [ ] Redefine Points and Presenters internal structure, as (from the bottom) double-linked list of points (forms Columns), and double-linked list of Columns (forms PointsColumns = Data) and Presenters (PresentersColumns)

7) [ ] Member privacy issues

   1) [ ] ChartPainter.layouter is forced non-private (_) if we want to allow extensibility outside of the chart package (extensibility by clients).

      + Other examples of same issue:

        - 

   2) [ ] Go over usage of private accessing private _chartLayouter._options - suspect. But maybe ok

8) [ ] Think of a way to get rid of the need to upcast in baseclass using " as SomeClass" - 2 occurences in "presenter as presenters.PointAndLinePresenter"

9) [ ] I think yAxisAbsMin/Max passed to layouters is switched. Fix it

10) *REMOVE NOISE OF nextRightPointsColumn nextRightColumnValuePoint*

    1) [ ] *nextRightPointsColumn* IS LIKELY UNUSED, REMOVE but check.

    2) [ ] *nextRightColumnValuePoint*  IS LIKELY UNUSED, REMOVE but check.

11) [ ] Create a document definiting sequence of layouters, and what each does
    - [ ] particular attention to where scaling happents
12) [ ] *Labels and legend improvements*

    1) [ ] labels when printed: 

       1) [ ] if too long, left justify and clip

    2) [ ] legend text clip if too long

13) [ ] Fix and test formalities, add docs, add examples, resolve versionning and library dependencies and branches, other preps before push to pub
    + [ ] *list it here*
    + [ ] 
    + [ ] fix dependencies in pubspec (rm mz)
    + [ ] Test and ensure empty data work.
    + [ ] *ADD TESTS FOR RANGE, END TO END ETC*


* TODO Future: Layout Recreation.
23. [ ] Look over Hotspot calcs and positions, may need to move to GuidingPoints or LayoutValues


* TODO Consider Change naming conventions to WX, HY, CY, CX so all names are consistent 
   - whateverOWX (width along x axis    - when context is offset of some other element)
   - whateverOHY (height along y axis   - when context is offset of some other element)
   - whateverCX  (X coordinate  )       - if it is just a point
   - whateverCY  (Y coordinate  )       - if it is just a point
   - rare use below v
   - whateverRWX (width along x axis  - when context is rectangle)
   - whateverRHY (height along y axis  - when context is rectangle)
   - whateverFromCY (Y coordinate from ) - if it is a point which is part of a line
   - whateverToCY (Y coordinate to )     - if it is a point which is part of a line
   - whateverFromCX (Y coordinate from ) - if it is a point which is part of a line
   - whateverToCX (Y coordinate to )     - if it is a point which is part of a line



