* Flutter Charts - Introduction

Flutter Charts is a charting library for Flutter, written in Flutter. Currently, column chart and line chart are supported.

You may want to study the included sample app ~flutter_charts_sample_app.dart~ to build your application using Flutter Charts. The sample app shows how a Flutter Chart can be included in a Flutter application.

* Flutter Chart - data, options, classes

Before we show several examples of charts, a few notes. 

- The ~ChartData~ class: allows to define data - X labels, Y values, (optional) Y labels, each-dataRow (series) legends, each-dataRow (series) color. The list below provides a summary description of each item
  - X labels: ~ChartData.xLabels~ allow to define X labels. Setting ~xLabels~ is required, but client can set them to empty strings.
  - Y values: ~ChartData.dataRows~ allow to define Y values in rows. Assumption: size of each data row in ~ChartData.dataRows~ is the same, and each data row size ==  ~ChartData.xLabels.size~
  - Y labels (optional): Normally, Y labels are generated from data. The option ~ChartOptions.useUserProvidedYLabels~ (default /true/), asks flutter_charts to data-generate Y labels. If this option is set to /false/, then ~ChartData.yLabels~ must be set. Any number of such user-provided Y labels is allowed.
  - Each-dataRow (each series) legends: ~ChartData.dataRowsLegends~ allow to define a legend for each data row in  ~ChartData.dataRows~. Assumption:  ~ChartData.dataRows.size~ ==  ~ChartData.dataRowsLegends.size~
  - Each-dataRow (each series) color: ~ChartData.dataRowsColors~ allow to define a color for each data row in  ~ChartData.dataRows~. Assumption:  ~ChartData.dataRows.size~ ==  ~ChartData.dataRowsColors.size~
- The  ~ChartOptions~ class: allows to define options, by using it's defaults, or setting some options to non default values. There are also ~LineChartOptions~ and ~VerticalBarChartOptions~ classes. 
- Support for randomly generated data, colors, labels: Flutter Charts also provides randomly generated data, in the class ~RandomChartData~. This class generates:
  - Y values data, 
  - X labels, 
  - Series colors, 
  - Series legends  
- Currently the only purpose of ~RandomChartData~ is for use in the examples below. To be clear, ~RandomChartData~ Y values, series colors, and series legends are not completely random - they hardcode some demoable label, legends, color values, and data ranges (data random within the range).


* Experimenting with Flutter Charts: Using the included sample app flutter_charts_sample_app.dart

There are multiple ways to experiment with Flutter Charts from your computer. We describe running Flutter Charts in development mode on your device (Android, iOS - follow 1, 2 or 3, 4 and 6), or alternatively on a device emulator (device emulator running from an IDE such as IntelliJ with Android Studio installed - follow 1, 2 or 3, 5, 6 or 7).

1. Install Flutter on your computer. See https://flutter.io/ installation section.
2. Clone flutter_charts code from Github to your computer. Needs git client.
 
  #+BEGIN_SRC sh
  cd DIRECTORY_OF_CHOICE
  git clone https://github.com/mzimmerm/flutter_charts.git
  # clone will create directory  flutter_charts
  cd flutter_charts
  #+END_SRC

3. (Alternative to 2.): Download and unzip flutter_charts code from Github
   - Browse to  https://github.com/mzimmerm/flutter_charts.git
   - On the righ top, click on the "Clone or Download" button, then select save Zip, save and extract to  DIRECTORY_OF_CHOICE
   - cd flutter_charts
4. Prepare a physical device (must be set to Development Mode) to run applications from your computer. Then connect a android device in development mode to your computer. See https://www.kingoapp.com/root-tutorials/how-to-enable-usb-debugging-mode-on-android.htm 

5. (Alternative to 4.): Prepare and start an Android device emulator on your computer.
   - Install Android Studio: see https://developer.android.com/studio/index.html

   - Install an IDE such as IntelliJ with Flutter plugin. See https://flutter.io/intellij-setup/

6. Run Flutter Charts demo app from command line (this will work in both method 4. and method 5.)

   #+BEGIN_SRC sh
   cd DIRECTORY_OF_CHOICE/flutter_charts 
   flutter run example/chart/flutter_charts_sample_app.dart 
   #+END_SRC

7. (Alternative to 6.) Run  Flutter Charts demo app from IDE. This will work only with method 5. 
  - Start IntelliJ IDE, create a project in the ~DIRECTORY_OF_CHOICE/flutter_charts~ start an Android emulator, then click on the Run button in Intellij (which should see the flutter_charts_sample_app)


** Sample Flutter Charts Application Output

As described above, there is one sample application in flutter_charts: example/chart/chart_usage_example.dart. You can run the application using one of the methods (6, 7) above.

This application is also used as a base to show several possible sample charts in the paragraphs below. Two samples:


Vertical Bar Chart (Column Chart)

[[file:README.org_20171102_154245_27063qmN.png]]

Point and Line Chart (Line Chart)

[[file:README.org_20171102_154329_270633wT.png]]

Output uses semi-random data. Click the blue + button to rerun chart with a different dataset.


* Flutter Charts: LineChart and VerticalBarChart Samples: Code and resulting charts

Flutter Charts code allow to define the following data items:

| /Data (Y values)/          | User-Provided or Random         |
| /X Labels/                 | User-Provided or Random         |
| /Options including Colors/ | User-Provided or Random         |
| /Data Rows Legends/        | User-Provided or Random         |
| /Y Labels/                 | User-Provided or Data-Generated |

The samples below show a few alternative code snippets (User-Provided or Random data, labels, option) and the resulting charts.

The chart images were obtained by substituting the code snippet to the ~example/chart/flutter_charts_sample_app.dart~ code. 


** TODO Random Data (Y values), Random X Labels, Random Colors, Random Data Rows Legends, Data-Generated Y Labels.

This example shows that Data-Generated Y labels is the default.  
Flutter Charts support reasonably intelligently generated Y Labels from data, including dealing with negatives.

The example charts in this section are equivalent to those shown in "Sample Flutter Charts Application Output".

Data setting code in ~defineOptionsAndData()~:

#+BEGIN_SRC java
   void defineOptionsAndData() {
     _lineChartOptions = new LineChartOptions();
     _verticalBarChartOptions = new VerticalBarChartOptions();
     _chartData = new RandomChartData(useUserProvidedYLabels: _lineChartOptions.useUserProvidedYLabels);
   }
#+END_SRC


*** Vertical bar chart.
** TODO User-Provided Data (Y values), User-Provided X Labels, Random Colors, User-Provided Data Rows Legends, Data-Generated Y Labels,
*** Vertical bar chart.
** TODO User-Provided Data (Y values), User-Provided X Labels, Random Colors, User-Provided Data Rows Legends, User-Provided Y Labels,
Explain how Y scaling is done with useUserProvidedYLabels.
Example with X axis: Java, Dart, Python, Newspeak,
*** Vertical bar chart

* VerticalBar Chart - one more example, showing positive/negative stacks:

** user data, user colors, user-provided labels: Example with positive/negative data that show stock groups X labels: Energy, Health, Finance, Chips, Oil)  Series Labels (<-2%, -2%_0%, 0%_+2%, >+2%) Y labels (Good, OK, Poor)



* Known Bugs

- Chart area needs clipping in the application

* Future Work

- First, crop labels not to run into the neighbor
- Next, probably to provide tooltips
- Next, a few more chart types: Spline line chart (stacked line chart), Grouped VerticalBar chart,
- Next, re-implement the layout more generically and clearly. Space saving changes such as /tilting/ labels.
- Next, add ability to invert X and Y axis (values on horizontal axis)

* Terminology and Selected Classes

- (Presenter)Leaf       :: The finest visual element presented in each  "column of view" in chart - that is, all widgets representing series of data displayed above each X label. For example, for Line chart, the leaf would be one line and dot representing one Y value at one X label. For the bar chart, the leaf would be one bar representing one (stacked) Y value at one X label.
  - Classes: Presenter, LineAndHotspotPresenter, VerticalBarPresenter, PresenterCreator
- Painter               :: Class which paints to chart to canvas. Terminology and class structure taken from Flutter's Painter and Painting classes.
  - Classes: todo
